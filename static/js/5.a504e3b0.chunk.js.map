{"version":3,"sources":["components/Raitings/Raiting.js","components/FilmInfo/FilmInfo.js"],"names":["Raiting","props","className","color","valueFromSer","onClick","value","Stars","FilmInfo","id","useParams","dispatch","useDispatch","useSelector","state","allFilms","filmInfo","filmsLoadingStatus","navigate","useNavigate","goBack","useEffect","fetchOneFilm","posterUrl","ratingKinopoisk","nameOriginal","description","result","Math","floor","useState","rating","setRating","elements","loading","Preloader","src","alt","renderFilms"],"mappings":"oMAKaA,EAAU,SAACC,GACpB,OACI,sBAAKC,UAAU,WAAf,UACI,cAAC,EAAD,CAAOC,MAAOF,EAAMG,aAAe,EAAGC,QAASJ,EAAMI,QAASC,MAAO,IACrE,cAAC,EAAD,CAAOH,MAAOF,EAAMG,aAAe,EAAGC,QAASJ,EAAMI,QAASC,MAAO,IACrE,cAAC,EAAD,CAAOH,MAAOF,EAAMG,aAAe,EAAGC,QAASJ,EAAMI,QAASC,MAAO,IACrE,cAAC,EAAD,CAAOH,MAAOF,EAAMG,aAAe,EAAGC,QAASJ,EAAMI,QAASC,MAAO,IACrE,cAAC,EAAD,CAAOH,MAAOF,EAAMG,aAAe,EAAGC,QAASJ,EAAMI,QAASC,MAAO,QAK3EC,EAAQ,SAACN,GACX,OACI,sBAAMI,QAAS,WAAOJ,EAAMI,QAAQJ,EAAMK,QAA1C,SACKL,EAAME,MACH,cAAC,IAAD,CAAaD,UAAU,UAEvB,cAAC,IAAD,CAAaA,UAAU,iB,sCCwCxBM,UAtDE,WAAO,IACbC,EAAMC,cAAND,GACDE,EAAWC,cAFE,EAGmBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAA1DC,EAHY,EAGZA,SAASC,EAHG,EAGHA,mBACVC,EAAWC,cAEXC,EAAS,kBAAMF,GAAU,IAG/BG,qBAAU,WACNV,EAASW,YAAab,MACxB,CAACA,EAAIE,IAXY,IAaZY,EAAsDP,EAAtDO,UAAUC,EAA4CR,EAA5CQ,gBAAgBC,EAA4BT,EAA5BS,aAAaC,EAAeV,EAAfU,YACxCC,EAASC,KAAKC,MAAML,EAAkB,GAdzB,EAeSM,mBAASH,GAflB,mBAeZI,EAfY,KAeJC,EAfI,KA6CbC,EA5Bc,SAACjB,EAAUkB,GAC3B,MAAgB,YAAZA,EACO,cAACC,EAAA,EAAD,IACY,UAAZD,EACA,8CAGPlB,EAEI,qCACI,qBAAKd,UAAU,iBAAf,SACI,qBAAKkC,IAAKb,EAAWc,IAAKd,EAAWrB,UAAU,iBAEnD,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAf,SAA4BuB,IAC5B,qBAAKvB,UAAU,cAAf,SAA8BwB,IAC9B,sBAAKxB,UAAU,UAAf,UACI,cAAC,EAAD,CAASE,aAAc2B,EAAQ1B,QAAS2B,IACxC,+BAAOR,OAEX,qBAAKnB,QAASe,EAAQlB,UAAU,OAAhC,SAAuC,yDAbvD,EAqBaoC,CAAYtB,EAAUC,GAEvC,OACI,qBAAKf,UAAU,WAAf,SACK+B","file":"static/js/5.a504e3b0.chunk.js","sourcesContent":["import './Raiting.css';\nimport {RiStarSFill, RiStarSLine} from \"react-icons/all\";\n\n\n\nexport const Raiting = (props) => {\n    return (\n        <div className='raitings'>\n            <Stars color={props.valueFromSer > 0} onClick={props.onClick} value={1}/>\n            <Stars color={props.valueFromSer > 1} onClick={props.onClick} value={2}/>\n            <Stars color={props.valueFromSer > 2} onClick={props.onClick} value={3}/>\n            <Stars color={props.valueFromSer > 3} onClick={props.onClick} value={4}/>\n            <Stars color={props.valueFromSer > 4} onClick={props.onClick} value={5}/>\n        </div>\n    )\n}\n\nconst Stars = (props) => {\n    return (\n        <span onClick={() => {props.onClick(props.value)}}>\n            {props.color ?\n                <RiStarSFill className='stars'/>\n                :\n                <RiStarSLine className='starsJust'/>}\n        </span>\n    )\n}","import './FilmInfo.css'\nimport {Raiting} from \"../Raitings/Raiting\";\nimport {useEffect, useState} from \"react\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchOneFilm} from \"../../redux/FilmsArrSlice\";\nimport {Preloader} from \"../Preloader/Preloader\";\n\n\nconst FilmInfo = () => {\n    const {id} = useParams();\n    const dispatch = useDispatch();\n    const {filmInfo,filmsLoadingStatus} = useSelector(state => state.allFilms)\n    const navigate = useNavigate();\n\n    const goBack = () => navigate(-1)\n\n\n    useEffect(() => {\n        dispatch(fetchOneFilm(id))\n    },[id, dispatch])\n\n    const {posterUrl,ratingKinopoisk,nameOriginal,description} = filmInfo\n    const result = Math.floor(ratingKinopoisk / 2)\n    const [rating, setRating] = useState(result)\n\n    const renderFilms = (filmInfo, loading) => {\n        if (loading === 'loading') {\n            return <Preloader/>\n        } else if (loading === \"error\") {\n            return <p>Loading error</p>\n        }\n        \n        if (filmInfo) {\n            return (\n                <>\n                    <div className=\"filmInfoPoster\">\n                        <img src={posterUrl} alt={posterUrl} className=\"filInfoImg\"/>\n                    </div>\n                    <div className=\"Info\">\n                        <div className=\"infoTitle\">{nameOriginal}</div>\n                        <div className=\"description\">{description}</div>\n                        <div className=\"raiting\">\n                            <Raiting valueFromSer={rating} onClick={setRating}/>\n                            <span>{ratingKinopoisk}</span>\n                        </div>\n                        <div onClick={goBack} className='back'><p>&#8592; Back</p></div>\n                        {/*<Video source={\"https://www.youtube.com/embed/JfVOs4VSpmA\"}/>*/}\n                    </div>\n                </>\n            )\n        }\n    }\n\n    const elements = renderFilms(filmInfo, filmsLoadingStatus)\n\n    return (\n        <div className='filmInfo'>\n            {elements}\n        </div>\n    )\n}\n\nexport default FilmInfo;"],"sourceRoot":""}